Keep in file format -- don't parse
Instead, construct a map of offset dependencies.

Data structures:
- Map of offset dependencies: file offset -> "pointers"
- Index of all offsets (as pointers)

Tasks:
Inserting a load command:
          (1) Find all offset records above expanded address; add to them.
          (2) For all pairs in map, adjust pointers. If the first and second of the pair lie on the same


Inserting an instruction:
          Same as inserting an


nah, just update everything every time!



The first step involves only modifications in-place, so references and pointers remain valid.
The second step involves inserting raw bytes into the binary, but this occurs at the top level so no reference or pointer invalidation occurs.


----

Pass 2 of parsing -- can't entirely be done in one pass.


---

Data in code -- how to represent? Or just ignore at this point?
Hmm... parsing instructions causes difficulties.

How to address? Parsing queue?

Perhaps prioritize some commands over others. E.g. prioritize LC_DATA_IN_CODE, LC_FUNCTION_STARTS, LC_MAIN, etc. over LC_SEGMENTs.

Dependency Graph
(x <- y) means that x depends on y

LC_MAIN <- LC_SEGMENT
LC_SEGMENT <- LC_DATA_IN_CODE
LC_FUNCTION_STARTS <- LC_SEGMENT


----

Pass 1: Construct multimap of load command IDs to offsets.
Pass 2:

----

Halo's binary doesn't use LC_DATA_IN_CODE, yet does have data in code. So proceed with guessing
which instructions are correct and skipping invalid ones (treating them as data blobs).

---

Idea -- don't even record rebase/bind information separately; record the information inside the section blobs themselves.
 - Advantage: easy to regenerate at emit time without bookkeeping during editing.
 - Disadvantage: Can't print out rebase information easily.

-------

Transforming Ideas

Two stages.
Stage 1: transform each MachO node into other node of opposite bits. Add each node do (void *) map.
Stage 2: bind all memebrs of MachO nodes using map.

-----


ParseEnv, 2nd pass?
Each section checks for resolution requests within its address range. If one matches, then remap that area.