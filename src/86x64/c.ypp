/* GRAMMAR REFERENCE: http://www.cs.man.ac.uk/~pjj/bnf/c_syntax.bnf */

%{
  #include <unordered_set>

  #include "ast.hpp"
  #include "semant.hpp" /* for g_semant_error */

  #define YYDEBUG 1
  #define YYLTYPE zc::SourceLoc
  #define YYLLOC_DEFAULT(Cur, Rhs, N)			\
    (Cur) = (N) ? YYRHSLOC(Rhs, 1) : YYRHSLOC(Rhs, 0);
  #define yylloc g_lineno

  void yyerror(const char *);
  int yylex(void);

  zc::TranslationUnit *g_AST_root;

  extern const char *g_filename;
  extern zc::TranslationUnit *g_translation_unit;

  extern zc::ScopedTable<Symbol *,char> typenames;
  void enscope_typedef(zc::Declaration *decl);

  int omerrs = 0; /* Number of lexing/parsing errors */

#include ZC_PARSER_HEADER

   const char *token_to_str(int tok);
   void dump_token(std::ostream& out, int lineno, int token, YYSTYPE yylval);
   void print_token(std::ostream& out, int token, YYSTYPE yylval);   

%}
                        
%union {
    const char *error_msg;
    int pointer;
    zc::StringExpr *string;
    zc::LiteralExpr *literal_expr;
    zc::Identifier *identifier;
    zc::TranslationUnit *translation_unit;
    zc::ExternalDecls *external_decls;
    zc::FunctionDef *function_def;
    zc::ASTDeclarators *declarators;
    zc::ASTDeclarator *declarator;
    zc::ASTStat *stat;
    zc::ASTStats *stats;
    zc::CompoundStat *compound_stat;
    zc::ExprStat *expr_stat;
    zc::ASTExpr *expr;
    zc::ASTExprs *exprs;
    zc::BinaryExpr::Kind binary_operator;
    zc::UnaryExpr::Kind unary_operator;
    zc::ASTType *type;
    zc::Types *types;
    int token;
    std::unordered_multiset<int> *token_multiset;
    std::vector<zc::Enumerator *> *enum_membs;
    zc::Declarations *declarations;
    zc::VarDeclarations *var_declarations;
    zc::VarDeclaration *var_declaration;
    zc::DeclSpecs *decl_specs;
    zc::TypeSpec *type_spec;
    zc::StorageClassSpec *storage_class_spec;
}

%initial-action {
    @$ = 1;
}                   

/* terminals */
%token ERROR

                         /* -- BINARY OPERATORS */
%token EQ       /* '==' */
%token NEQ      /* '!=' */
%token LEQ      /* '<=' */
%token GEQ      /* '>=' */
%token OR   /* '||' */
%token AND  /* '&&' */

 /* TYPES */
%token VOID
%token CHAR
%token SHORT            
%token INT
%token LONG
%token SIGNED
%token UNSIGNED
                        
%token <string> STRING  
%token <expr> INT_CONST
%token <expr> CHAR_CONST
%token <identifier> ID
%token STRUCT
%token SIZEOF
%token ARROW
%token UNION
%token GOTO
%token ENUM
%token BREAK
%token CONTINUE
%token INC
%token DEC

 /* CONTROL */
%token RETURN
%token IF
%token ELSE
%token WHILE
%token FOR

                        /* STORAGE CLASS SPECS */
%token AUTO REGISTER STATIC EXTERN TYPEDEF
%token  <identifier> TYPE_NAME
                        
                         /* IDENTIFIERS */
%type  <translation_unit> translation_unit
%type  <external_decls> external_decl
%type  <function_def>  function_definition
%type  <declarations>         optional_decl_list decl_list decl struct_decl_list struct_decl
%type  <declarators>   init_declarator_list optional_init_declarator_list struct_declarator_list
%type  <declarator>    init_declarator declarator direct_declarator optional_abstract_declarator abstract_declarator direct_abstract_declarator struct_declarator
%type   <enum_membs>    enumerator_list
%type  <pointer>       pointer
%type  <var_declaration>    param_decl
%type  <var_declarations>   param_type_list optional_param_type_list param_list
%type  <stat>          stat jump_stat selection_stat iteration_stat labeled_stat
%type  <stats>         optional_stat_list stat_list
%type  <compound_stat> compound_stat
%type  <expr_stat>     exp_stat
%type  <expr>          exp postfix_exp primary_exp unary_exp conditional_exp logical_or_exp logical_and_exp inclusive_or_exp exclusive_or_exp and_exp equality_exp relational_exp shift_expression additive_exp mult_exp cast_exp constant_exp assignment_exp optional_exp const_exp enumerator_optional_const_exp
%type  <binary_operator> relational_operator additive_operator mult_operator equality_operator
%type  <unary_operator> unary_operator
%type  <exprs>         optional_argument_exp_list argument_exp_list
%type  <type>           type_name
%type   <type>    struct_or_enum_spec enum_spec
%type   <decl_specs>    decl_specs
%type   <type_spec>     type_spec
%type   <storage_class_spec> storage_class_spec
                        
%%

translation_unit:
                external_decl {
                    g_AST_root = $$ =
                        zc::TranslationUnit::Create
                        (new zc::ExternalDecls($1->begin(), $1->end()), @1);
                    //g_AST_root = $$ = zc::TranslationUnit::Create(zc::ExternalDecls::Create(@1), @1);
                    //$$->decls()->vec().insert($$->decls()->vec().end(),
                    //$1->vec().begin(),
                    //$1->vec().end());
                }
        |       translation_unit external_decl {
                  $$ = $1;
                  $$->decls()->insert($$->decls()->end(), $2->begin(), $2->end());
                }
        ;
external_decl:  function_definition {
                    $$ = new zc::ExternalDecls {$1};
                }
        |       decl {
            $$ = new zc::ExternalDecls();
            std::transform($1->begin(), $1->end(), std::back_inserter(*$$), 
                           [&](zc::Declaration *decl) -> zc::ExternalDecl * {
                               return zc::ExternalDecl::Create(decl, @1);
                           });
                }
        ;
function_definition:
                decl_specs declarator compound_stat {
                    zc::ASTType *type = $1->Type(zc::g_semant_error);
                    $$ = zc::FunctionDef::Create
                        ($3,
                         zc::VarDeclaration::Create($2->sym(), false,
                                                    zc::ASTType::Create(type, $2), @1), @1);
                }
        ; /* incomplete */
optional_decl_list:
                /* empty */ { $$ = new zc::Declarations(); }
        |       decl_list { $$ = $1; }
        ;

decl_list:      decl
        |       decl_list decl {
                    $$ = $1; $$->insert($1->end(), $2->begin(), $2->end());
                }
        ;
decl:           decl_specs optional_init_declarator_list ';' {
                    $$ = new zc::Declarations();
                    zc::ASTType *specs_type = $1->Type(zc::g_semant_error);
                    specs_type->get_declarables($$);
                    for (auto declarator : $2->vec()) {
                        declarator->get_declarables($$);
                        zc::Declaration *decl = $1->GetDecl(zc::g_semant_error, declarator);
                        enscope_typedef(decl);
                        $$->push_back(decl);
                    }
                
                }
        ;
decl_specs:     type_spec decl_specs {
                    $$ = $2;
                    $1->AddTo($$);
                }
        |       type_spec {
                    $$ = zc::DeclSpecs::Create(@1);
                    $1->AddTo($$);
                }
        |       storage_class_spec decl_specs {
                    $$ = $2;
                    $1->AddTo($$);
                }
        |       storage_class_spec {
                    $$ = zc::DeclSpecs::Create(@1);
                    $1->AddTo($$);
                }
        ;
type_spec:      VOID { $$ = zc::BasicTypeSpec::Create(zc::BasicTypeSpec::Kind::TS_VOID, @1); }
        |       CHAR { $$ = zc::BasicTypeSpec::Create(zc::BasicTypeSpec::Kind::TS_CHAR, @1); }
        |       SHORT { $$ = zc::BasicTypeSpec::Create(zc::BasicTypeSpec::Kind::TS_SHORT, @1); }
        |       INT { $$ = zc::BasicTypeSpec::Create(zc::BasicTypeSpec::Kind::TS_INT, @1); }
        |       LONG { $$ = zc::BasicTypeSpec::Create(zc::BasicTypeSpec::Kind::TS_LONG, @1); }
        |       SIGNED { $$ = zc::BasicTypeSpec::Create(zc::BasicTypeSpec::Kind::TS_SIGNED, @1); }
        |       UNSIGNED { $$ = zc::BasicTypeSpec::Create(zc::BasicTypeSpec::Kind::TS_UNSIGNED,
                                                          @1); }
        |       struct_or_enum_spec { $$ = zc::ComplexTypeSpec::Create($1, @1); }
        |       enum_spec { $$ = zc::ComplexTypeSpec::Create($1, @1); }
        |       TYPE_NAME { $$ = zc::TypenameSpec::Create($1, @1); }
        ;
storage_class_spec:
                AUTO { $$ = zc::StorageClassSpec::Create(zc::StorageClassSpec::Kind::SC_AUTO, @1); }
        |       REGISTER { $$ = zc::StorageClassSpec::Create(zc::StorageClassSpec::Kind::SC_REGISTER, @1); }
        |       STATIC { $$ = zc::StorageClassSpec::Create(zc::StorageClassSpec::Kind::SC_STATIC, @1); }
        |       EXTERN { $$ = zc::StorageClassSpec::Create(zc::StorageClassSpec::Kind::SC_EXTERN, @1); }
        |       TYPEDEF { $$ = zc::StorageClassSpec::Create(zc::StorageClassSpec::Kind::SC_TYPEDEF, @1); }
        ;
struct_or_enum_spec:
                STRUCT ID '{' struct_decl_list '}' {
                    $$ = zc::StructType::Create(zc::g_semant_error, $4->begin(), $4->end(),
                                                $2->id(), @1);
                }
        |       STRUCT ID {
                    $$ = zc::StructType::Create($2->id(), @1);
                }
        |       UNION ID '{' struct_decl_list '}' {
                   $$ = zc::UnionType::Create(zc::g_semant_error, $4->begin(),
                                              $4->end(), $2->id(), @1);
                }
        |       UNION ID { $$ = zc::UnionType::Create($2->id(), @1); }
        ; /* incomplete */
struct_decl_list: 
                struct_decl {
                         $$ = new zc::Declarations();
                         $$->insert($$->end(), $1->begin(), $1->end());
                }
        |       struct_decl_list struct_decl {
                     $$ = $1;;
                     $$->insert($$->end(), $2->begin(), $2->end());
                }
        ;
struct_decl:    decl_specs struct_declarator_list ';' {
                    $$ = new zc::Declarations();
                    zc::ASTType *type = $1->Type(zc::g_semant_error);
                    type->get_declarables($$);
                    for (auto declarator : $2->vec()) {
                        declarator->get_declarables($$);
                        $$->push_back
                            (zc::VarDeclaration::Create(declarator->sym(), false,
                                                        zc::ASTType::Create(type, declarator), @1));
                    }
                }           
        ;
struct_declarator_list:
                struct_declarator { $$ = zc::ASTDeclarators::Create(@1); $$->vec().push_back($1); }
        |       struct_declarator_list ',' struct_declarator {
                     $$ = $1;
                     $$->vec().push_back($3);
                }
        ;
struct_declarator:
                declarator
        ; /* incomplete (bit fields) */
enum_spec:      ENUM ID '{' enumerator_list '}' {
                    $$ = zc::EnumType::Create(zc::g_semant_error, $4->begin(), $4->end(),
                                                $2->id(), @1);
                    
                    $$ = zc::EnumType::Create(zc::g_semant_error, $4->begin(),
                                              $4->end(), $2->id(), @1);
                }
        |       ENUM '{' enumerator_list '}' {
                    $$ = zc::EnumType::Create(zc::g_semant_error, $3->begin(),
                                              $3->end(), nullptr, @1);
                }
        |       ENUM ID { $$ = zc::EnumType::Create($2->id(), @1); }
        ;
enumerator_list:
                ID enumerator_optional_const_exp {
                    $$ = new std::vector<zc::Enumerator *>
                        {zc::Enumerator::Create($1, $2, nullptr, @1)};
                }
        |       enumerator_list ',' ID enumerator_optional_const_exp {
                    $$ = $1; $$->push_back(zc::Enumerator::Create($3, $4, $$->back(), @1));
                }
        ;
enumerator_optional_const_exp:
                /* empty */ { $$ = nullptr; }
        |       '=' const_exp { $$ = $2; }
        ;
optional_init_declarator_list:
                /* empty */ { $$ = zc::ASTDeclarators::Create(@$); @$ = 0; }
        |       init_declarator_list
        ;
init_declarator_list:
                        init_declarator {
                            $$ = zc::ASTDeclarators::Create(@1);
                            $$->vec().push_back($1);
                        }
                |       init_declarator_list ',' init_declarator { $$ = $1; $$->vec().push_back($3); }
        ; /* incomplete */
init_declarator:
                declarator
        ; /* incomplete */
declarator:     direct_declarator { $$ = $1; }
        |       pointer direct_declarator { $$ = zc::PointerDeclarator::Create($1, $2, @1); }
        ;
direct_declarator:
                ID { $$ = zc::BasicDeclarator::Create($1, @1); }
        |       '(' declarator ')' { $$ = $2; }
        |       direct_declarator '(' optional_param_type_list ')' {
                     $$ = zc::FunctionDeclarator::Create($1, $3, @1);
                }
        |       direct_declarator '[' const_exp ']' {
                     $$ = zc::ArrayDeclarator::Create($1, $3, @1);
                }   
        ; /* incomplete */
pointer:        '*' { $$ = 1; }
        |       '*' pointer { $$ = $2 + 1; }
        ;
optional_param_type_list:
                /* empty */ { $$ = new zc::VarDeclarations(); }
        |       param_type_list { $$ = $1; }
        ;
param_type_list:
                param_list
        ; /* incomplete */
param_list:     param_decl { $$ = new zc::VarDeclarations(); $$->push_back($1); }
        |       param_list ',' param_decl { $$ = $1; $$->push_back($3); }
        ;
param_decl:     decl_specs declarator {
                    auto type_specs_type = $1->Type(zc::g_semant_error);
                    auto type = zc::ASTType::Create(type_specs_type, $2);
                    $$ = zc::VarDeclaration::Create($2->sym(), false, type, @1);
                }
        |       decl_specs abstract_declarator {
                    auto type_specs_type = $1->Type(zc::g_semant_error);
                    auto type = zc::ASTType::Create(type_specs_type, $2);
                    $$ = zc::VarDeclaration::Create(nullptr, false, type, @1);
                }   
        |       decl_specs {
                    auto type = $1->Type(zc::g_semant_error);
                    $$ = zc::VarDeclaration::Create(nullptr, false, type, @1);
                }
        ; /* incomplete */
stat:           exp_stat { $$ = $1; }
        |       compound_stat { $$ = $1; }
        |       jump_stat { $$ = $1; }
        |       selection_stat { $$ = $1; }
        |       iteration_stat{ $$ = $1; }
        |       labeled_stat { $$ = $1; }
        ; /* incomplete */
optional_stat_list:
                /* empty */ { $$ = new zc::ASTStats(); }
        |       stat_list { $$ = $1; }
        ;
stat_list:      stat { $$ = new zc::ASTStats {$1}; }
        |       stat_list stat { $$->push_back($2); }
        ;
compound_stat:  '{' optional_decl_list optional_stat_list '}' {
                    $$ = zc::CompoundStat::Create($2, $3, @1);
                }
        ;
labeled_stat:   ID ':' stat { $$ = zc::LabelDefStat::Create($1, $3, @1); }
        ;
jump_stat:      RETURN optional_exp ';' { $$ = zc::ReturnStat::Create($2, @1); }
        |       GOTO ID ';' { $$ = zc::GotoStat::Create($2, @1); }
        |       CONTINUE ';' { $$ = zc::ContinueStat::Create(@1); }
        |       BREAK ';' { $$ = zc::BreakStat::Create(@1); }
        ;
selection_stat: IF '(' exp ')' stat { $$ = zc::IfStat::Create($3, $5, zc::NoStat::Create(@1), @1); }
        |       IF '(' exp ')' stat ELSE stat { $$ = zc::IfStat::Create($3, $5, $7, @1); }
        ;
iteration_stat:
                WHILE '(' exp ')' stat {
                    $$ = zc::WhileStat::Create($3, $5, @3);
                }
        |       FOR '(' optional_exp ';' optional_exp ';' optional_exp ')' stat {
                    $$ = zc::ForStat::Create($3, $5, $7, $9, @1);
                }
        ;
exp_stat:       optional_exp ';' { $$ = zc::ExprStat::Create($1, @1); }
        ;
optional_exp:   /* empty */ { $$ = zc::NoExpr::Create(@$); @$ = 0; }
        |       exp         { $$ = $1; }
        ;
exp:            assignment_exp { $$ = $1; }
        |       exp ',' assignment_exp { $$ = zc::BinaryExpr::Create(zc::BinaryExpr::Kind::BOP_COMMA, $1, $3, @1); }
        ;
assignment_exp: conditional_exp { $$ = $1; }
        |       unary_exp '=' conditional_exp { $$ = zc::AssignmentExpr::Create($1, $3, @1); }
        ; /* incomplete */
conditional_exp:
                logical_or_exp
        ; /* incomplete */
const_exp:      conditional_exp
        ;
unary_exp:      postfix_exp
        |       unary_operator unary_exp { $$ = zc::UnaryExpr::Create($1, $2, @1); }
        |       SIZEOF unary_exp { $$ = zc::SizeofExpr::Create($2, @1); }
        |       SIZEOF '(' type_name ')' { $$ = zc::SizeofExpr::Create($3, @1); }
        |       INC unary_exp {
                    $$ = zc::UnaryExpr::Create(zc::UnaryExpr::Kind::UOP_INC_PRE, $2, @1);
                }
        |       DEC unary_exp {
                    $$ = zc::UnaryExpr::Create(zc::UnaryExpr::Kind::UOP_DEC_PRE, $2, @1);
                }
        ; /* incomplete */
logical_or_exp: logical_and_exp
        |       logical_or_exp OR logical_and_exp {
                    $$ = zc::BinaryExpr::Create(zc::BinaryExpr::Kind::BOP_LOGICAL_OR, $1, $3, @1);
                }
        ;
logical_and_exp:
                inclusive_or_exp
        |       logical_and_exp AND inclusive_or_exp {
                    $$ = zc::BinaryExpr::Create(zc::BinaryExpr::Kind::BOP_LOGICAL_AND, $1, $3, @1);
                }
        ;
inclusive_or_exp:
                exclusive_or_exp
        |       inclusive_or_exp '|' exclusive_or_exp {
                    $$ = zc::BinaryExpr::Create(zc::BinaryExpr::Kind::BOP_BITWISE_OR, $1, $3, @1);
                }
        ;
exclusive_or_exp:
                and_exp
        |       exclusive_or_exp '^' and_exp {
                    $$ = zc::BinaryExpr::Create(zc::BinaryExpr::Kind::BOP_BITWISE_XOR, $1, $3, @1);
                }
        ;
and_exp:        equality_exp
        |       and_exp '&' equality_exp {
                    $$ = zc::BinaryExpr::Create(zc::BinaryExpr::Kind::BOP_BITWISE_AND, $1, $3, @1);
                }           
        ;
equality_exp:   relational_exp
        |       equality_exp equality_operator relational_exp {
                    $$ = zc::BinaryExpr::Create($2, $1, $3, @1);
                }
        ;
relational_exp: shift_expression
        |       relational_exp relational_operator shift_expression {
                    $$ = zc::BinaryExpr::Create($2, $1, $3, @1);
                }
        ;
shift_expression:
                additive_exp
        ; /* incomplete */
additive_exp:   mult_exp
        |       additive_exp additive_operator mult_exp {
                    $$ = zc::BinaryExpr::Create($2, $1, $3, @1);
                }
        ;
mult_exp:       cast_exp { $$ = $1; }
        |       mult_exp mult_operator cast_exp {
                    $$ = zc::BinaryExpr::Create($2, $1, $3, @1);
                }
        ;
cast_exp:       unary_exp { $$ = $1; }
        |       '(' type_name ')' cast_exp {
                    $$ = zc::CastExpr::Create($2, $4, @1);
                }   
        ;
type_name:      decl_specs optional_abstract_declarator {
                    zc::ASTType *type = $1->Type(zc::g_semant_error);
                    $$ = zc::ASTType::Create(type, $2);
                }
        ;
optional_abstract_declarator:
                /* empty */ { $$ = zc::BasicDeclarator::Create(nullptr, 0); }
        |       abstract_declarator { $$ = $1; }
        ;
abstract_declarator:
                pointer {
                    $$ = zc::PointerDeclarator::Create($1, zc::BasicDeclarator::Create(nullptr, 0),
                                                       @1);
                }
        |       pointer direct_abstract_declarator {
                    $$ = zc::PointerDeclarator::Create($1, $2, @1);
                }
        |       direct_abstract_declarator { $$ = $1; }
        ;
direct_abstract_declarator:
                '(' abstract_declarator ')' { $$ = $2; }
        |       direct_abstract_declarator '(' optional_param_type_list ')' {
                    $$ = zc::FunctionDeclarator::Create($1, $3, @1);
                }
        |       '(' optional_param_type_list ')' {
                    $$ = zc::FunctionDeclarator::Create(zc::BasicDeclarator::Create(nullptr, 0),
                                                        $2, @2);
                }
        ;

postfix_exp:    primary_exp
        |       postfix_exp '(' optional_argument_exp_list ')' {
                    $$ = zc::CallExpr::Create($1, $3, @1);
                }
        |       postfix_exp '[' exp ']' {
                    $$ = zc::IndexExpr::Create($1, $3, @1);
                }   
        |       postfix_exp '.' ID {
                    $$ = zc::MembExpr::Create($1, $3->id(), @1);
                }
        |       postfix_exp ARROW ID {
                    /* dereference postfix_exp, then create MembExpr */
                    zc::ASTExpr *expr = zc::UnaryExpr::Create(zc::UnaryExpr::Kind::UOP_DEREFERENCE,
                                                              $1, @1);
                    $$ = zc::MembExpr::Create(expr, $3->id(), @1);
                }
        |       postfix_exp INC {
                    $$ = zc::UnaryExpr::Create(zc::UnaryExpr::Kind::UOP_INC_POST, $1, @1);
                }
        |       postfix_exp DEC {
                    $$ = zc::UnaryExpr::Create(zc::UnaryExpr::Kind::UOP_DEC_POST, $1, @1);
                }   
        ; /* incomplete */
optional_argument_exp_list:
                /* empty */ { $$ = new zc::ASTExprs(); }
        |       argument_exp_list { $$ = $1; }
        ;
argument_exp_list:
                assignment_exp { $$ = new zc::ASTExprs {$1}; }
        |       argument_exp_list ',' assignment_exp { $$ = $1; $$->push_back($3); }
        ;
primary_exp:    ID { $$ = zc::IdentifierExpr::Create($1, @1); }
        |       constant_exp
        |       '(' exp ')' { $$ = $2; }
        ; /* incomplete */
constant_exp:   INT_CONST
        |       CHAR_CONST
        ; /* incomplete */

equality_operator:
                EQ { $$ = zc::BinaryExpr::Kind::BOP_EQ; }
        |       NEQ { $$ = zc::BinaryExpr::Kind::BOP_NEQ; }
        ;
relational_operator:
                '<' { $$ = zc::BinaryExpr::Kind::BOP_LT; }
        |       LEQ { $$ = zc::BinaryExpr::Kind::BOP_LEQ; }
        |       '>' { $$ = zc::BinaryExpr::Kind::BOP_GT; }
        |       GEQ { $$ = zc::BinaryExpr::Kind::BOP_GEQ; }
        ; /* incomplete */
additive_operator:
                '+' { $$ = zc::BinaryExpr::Kind::BOP_PLUS; }
        |       '-' { $$ = zc::BinaryExpr::Kind::BOP_MINUS; }
        ;
mult_operator:  '*' { $$ = zc::BinaryExpr::Kind::BOP_TIMES; }
        |       '/' { $$ = zc::BinaryExpr::Kind::BOP_DIVIDE; }
        |       '%' { $$ = zc::BinaryExpr::Kind::BOP_MOD; }
        ;
unary_operator: '&' { $$ = zc::UnaryExpr::Kind::UOP_ADDR; }
        |       '*' { $$ = zc::UnaryExpr::Kind::UOP_DEREFERENCE; }
        |       '+' { $$ = zc::UnaryExpr::Kind::UOP_POSITIVE; }
        |       '-' { $$ = zc::UnaryExpr::Kind::UOP_NEGATIVE; }
        |       '~' { $$ = zc::UnaryExpr::Kind::UOP_BITWISE_NOT; }
        |       '!' { $$ = zc::UnaryExpr::Kind::UOP_LOGICAL_NOT; }
        ;

%%

void yyerror(const char *s) {
    extern zc::SourceLoc g_lineno;

    std::cerr << "\"" << g_filename << "\", " << "line " << g_lineno << ": " << s << " at or near ";
    print_token(std::cerr, yychar, yylval);
    std::cerr << std::endl;

    ++omerrs;

    if (omerrs > 50) {
        std::cerr << "More than 50 errors" << std::endl;
        exit(1);
    }
}

 void enscope_typedef(zc::Declaration *decl) {
     zc::TypenameDeclaration *tn = dynamic_cast<zc::TypenameDeclaration *>(decl);

     if (tn) {
         if (typenames.Probe(tn->sym()) == nullptr) {
             typenames.AddToScope(tn->sym(), (char *) 1);
         }
     }
 }

   const char *token_to_string(int tok) {
      const char *char_tok_strs[] =
         {";", "{", "}", ",", ":", "=", "(", ")", "[", "]", ".", "&", "!", "~",
          "-", "+", "*", "/", "%", "<", ">", "^", "|", "?"
         };
      const char *char_tok_str = ";{},:=()[].&!~-+*/%<>^|?";
      const char *char_tok_ptr;
      off_t char_tok_index;
        
      switch (tok) {
      case 0: return "EOF";
      case ERROR: return "ERROR";
      case EQ: return "EQ";
      case NEQ: return "NEQ";
      case LEQ: return "LEQ";
      case GEQ: return "GEQ";
      case OR: return "OR";
      case AND: return "AND";
      case VOID: return "VOID";
      case CHAR: return "CHAR";
      case SHORT: return "SHORT";
      case INT: return "INT";
      case LONG: return "LONG";
      case STRING: return "STRING";
      case INT_CONST: return "INT_CONST";
      case CHAR_CONST: return "CHAR_CONST";
      case ID: return "ID";
      default:
         if ((char_tok_ptr = strchr(char_tok_str, tok)) == NULL) {
            return "(invalid token)";
         }
         char_tok_index = char_tok_ptr - char_tok_str;
         return char_tok_strs[char_tok_index];
      }
   }
    

   void print_token(std::ostream& out, int token, YYSTYPE yylval) {
      out << token_to_string(token);
      
      switch (token) {
      case STRING:
         out << " \"";
         out << static_cast<zc::StringExpr *>(yylval.expr)->str() << "\"";
         break;
      case INT_CONST:
         out << " " << static_cast<zc::LiteralExpr *>(yylval.expr)->val();
         break;
      case CHAR_CONST:            
         out << " '" << (char) static_cast<zc::LiteralExpr *>(yylval.expr)->val() << "'";
         break;
      case ID:
         out << " '" << *yylval.identifier->id() << "'";
         break;
      case ERROR:
         out << " \"" << yylval.error_msg << "\"";
         break;
      default:
         break;
      }
      out << std::endl;
        
   }

   void dump_token(std::ostream& out, int lineno, int token, YYSTYPE yylval) {
      out << "#" << lineno << " " << token_to_string(token);
      print_token(out, token, yylval);
   }
